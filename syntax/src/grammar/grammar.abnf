; This file is written using the Augmented BNF for Syntax (ABNF) as defined by
; RFC 5234 (https://datatracker.ietf.org/doc/html/rfc5234).
; The rules `iunreserved`, `ipchar`, `iquery`, `ifragment` and `IRI-reference`
; are defined in RCF 3987 on Internationalized Resource Identifiers (IRIs).
; The core rules `ALPHA` and `DIGIT` and `HEXDIGIT` are defined in Appendix B
; of RFC 5234.

; TreeLDR Document.
treeldr-document           = *WS [ item-list *WS ]

item                       = base
                           / use
                           / type
                           / layout
                           / property
item-list                  = item [ LWS item-list ]

base                       = %s"base" LWS IRI-reference-literal LWS ";"
use                        = %s"use" LWS IRI-reference-literal LWS %s"as" name ";"
type                       = doc %s"type" LWS id LWS type-description
layout                     = doc %s"layout" LWS id LWS layout-description
property                   = doc %s"property" LWS property-definition ";"

type-description           = type-alias / normal-type-definition
type-alias                 = "=" LWS inner-type-expr LWS [ %s"with" LWS inner-layout-expr ] ";"
normal-type-definition     = "{" LWS [ property-list LWS ] "}" [ %s"with" LWS inner-layout-expr ";" ]

layout-description          = layout-alias / structure-definition
layout-alias               = "=" LWS inner-layout-expr LWS ";"
structure-definition       = [ %s"for" LWS id LWS ] "{" LWS [ field-list LWS ] "}"

field-list                 = field-definition *(LWS "," LWS field-definition)
field-definition           = doc [ attribute-list LWS ] id [ LWS ":" LWS [ attribute-list ] LWS layout-expr ]

property-definition        = doc [ attributeLis LWS ] id [ LWS ":" LWS [ attribute-list ] LWS type-expr ]
property-list              = property-definition *(LWS "," LWS property-definition)
attribute                  = %s"required" / %s"multiple"
attribute-list             = attribute *(LWS "," LWS attribute)

; Node identifier
id                         = name
                           / compact-iri
                           / IRI-reference-literal

; Type expressions.
type-expr                  = inner-named-type-expr
                           / type-union
                           / type-intersection
inner-named-type-expr      = inner-type-expr [ LWS %s"as" LWS name / LWS %s"with" LWS id ]
inner-type-expr            = id
                           / reference-layout
                           / literal
                           / property-restriction
                           / list-type
                           / "(" LWS type-expr LWS ")"
type-union                 = inner-named-type-expr *(LWS "|" LWS inner-named-type-expr)
type-intersection          = inner-named-type-expr *(LWS "&" LWS inner-named-type-expr)

property-restriction       = property-range-restriction
property-range-restriction = (%s"any" / %s"all") LWS id LWS [ %s"as" name LWS ] ":" LWS inner-type-expr

list-type                  = "[" LWS inner-type-expr LWS "]"

; Layout expressions.
layout-expr                = inner-named-layout-expr
                           / layout-union
                           / layout-intersection
inner-named-layout-expr    = inner-layout-expr [ LWS %s"as" LWS name ]
inner-layout-expr          = id
                           / reference-layout
                           / literal
                           / field-restriction
                           / array-layout
                           / "(" LWS layout-expr LWS ")"
layout-union               = inner-named-layout-expr *(LWS "|" LWS inner-named-layout-expr)
layout-intersection        = inner-named-layout-expr *(LWS "&" LWS inner-named-layout-expr)

field-restriction          = field-range-restriction
field-range-restriction    = (%s"any" / %s"all") [ LWS id %s"as" ] LWS name LWS ":" LWS inner-layout-expr

array-layout               = "[" LWS inner-layout-expr LWS "]"

; Type/Layout expressions.
reference-layout           = "&" LWS inner-type-expr
literal                    = string / regexp

; Documentation comments.
doc                        = *WS *doc-line

; Productions for terminals.
name                       = *iunreserved
compact-iri                = name ":" suffix
suffix                     = *( ipchar / "/" ) [ "?" iquery ] [ "#" ifragment ]
                           / iprivate iquery [ "#" ifragment ]
IRI-reference-literal      = "<" IRI-reference ">"

string-char                = %x0-9 / %xB / %xC / %xE-21 / %x23-5B / %x5D-EFFFF ; any char but %x22=" %x5C=\ %xA=new line %xD=carriage return.
string                     = %x22 *(string-char / e-char / u-char) %x22 ; %x22="
regexp-char                = %x0-9 / %xB / %xC / %xe-2E / %x30-5b / %x5D-EFFFF ; any char but %x2F=/ %x5C=\ %xA=new line %xD=carriage return.
regexp                     = "/" *(regexp-char / e-char / u-char) "/"
u-char                     = %s"\u" HEXDIG HEXDIG HEXDIG HEXDIG
                           / %s"\U" HEXDIG HEXDIG HEXDIG HEXDIG HEXDIG HEXDIG HEXDIG HEXDIG
e-char                     = "\" ( %s"t" / %s"b" / %s"n" / %s"r" / %s"f" / %x22 / "'" / "\" )

doc-line                   = "///" (%x0-9 / %xB-EFFFF) *WS ; everything but %xA=new line

; Whitespaces
WS                         = %x20 / %x9 / %xD / %xA ; %x20=space %x9=character tabulation %xD=carriage return %xA=new line
LWS                        = 1*WS ; linear white spaces
