{
	"scopeName": "source.treeldr",
	"patterns": [
		{
			"name": "comment.line.documentation.treeldr",
			"begin": "##",
			"end": "\n"
		},
		{
			"name": "comment.line.double-slash.treeldr",
			"begin": "#",
			"end": "\n"
		},
		{
			"name": "variable.language.treeldr",
			"match": "\\?(self|Self)\\b"
		},
		{
			"name": "variable.other.treeldr",
			"match": "\\?\\w+\\b"
		},
		{
			"name": "keyword.treeldr",
			"match": "\\b(prefix|struct|union|where|as|let|all|min|max|fn|forall|set)\\b"
		},
		{
			"name": "entity.name.type.treeldr",
			"match": "\\b(bool|u8|u16|u32|u64|i8|i16|i32|i64|string|\\p{Lu}\\w*)\\b"
		},
		{
			"name": "entity.name.section.treeldr",
			"match": "\\b\\w*:(?=\\w)"
		},
		{
			"name": "entity.name.type.treeldr",
			"match": "(?<=:)\\w+\\b"
		},
		{
			"name": "string.quoted.other.uri.treeldr",
			"begin": "<",
			"end": ">"
		},
		{
			"name": "string.quoted.double.treeldr",
			"match": "\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"",
			"patterns": [
				{
					"name": "constant.character.escape.treeldr",
					"match": "\\."
				}
			]
		},
		{
			"name": "string.regexp.treeldr",
			"match": "/[^/\\\\]*(?:\\\\.[^/\\\\]*)*/",
			"patterns": [
				{
					"name": "constant.character.escape.treeldr",
					"match": "\\."
				}
			]
		}
	]
}